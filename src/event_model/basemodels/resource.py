# ruff: noqa
# type: ignore
# generated by datamodel-codegen:
#   filename:  resource.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class PathSemantics(Enum):
    """
    Rules for joining paths
    """

    posix = "posix"
    windows = "windows"


class PartialResource(BaseModel):
    spec: str = Field(..., title="spec")
    """
    String identifying the format/type of this Resource, used to identify a compatible Handler
    """
    resource_kwargs: Dict[str, Any] = Field(..., title="resource_kwargs")
    """
    Additional argument to pass to the Handler to read a Resource
    """
    resource_path: str = Field(..., title="resource_path")
    """
    Filepath or URI for locating this resource
    """
    root: str = Field(..., title="root")
    """
    Subset of resource_path that is a local detail, not semantic.
    """
    uid: str = Field(..., title="uid")
    """
    Globally unique identifier for this Resource
    """


class Resource(PartialResource):
    """
    Document to reference a collection (e.g. file or group of files) of externally-stored data
    """

    path_semantics: Optional[PathSemantics] = Field(None, title="path_semantics")
    """
    Rules for joining paths
    """
    run_start: Optional[str] = Field(None, title="run_start")
    """
    Globally unique ID to the run_start document this resource is associated with.
    """
