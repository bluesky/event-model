# ruff: noqa
# type: ignore
# generated by datamodel-codegen:
#   filename:  run_stop.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ExitStatus(Enum):
    """
    State of the run when it ended
    """

    success = "success"
    abort = "abort"
    fail = "fail"


import re

from pydantic import field_validator


class DataType(RootModel):
    root: Dict[str, Union["DataType", Any]] = Field(..., title="DataType")

    @field_validator("root")
    def validate_root(cls, value):
        if not isinstance(value, dict):
            value
        pattern = r"^([^./]+)$"
        for key, val in value.items():
            if not re.match(pattern, key):
                raise ValueError(f"Key '{key}' does not match pattern '{pattern}'")
            if isinstance(val, dict):
                value[key] = DataType(**val)
        return value


class RunStop(BaseModel):
    """
    Document for the end of a run indicating the success/fail state of the run and the end time
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    data_type: Optional[DataType] = None
    """
    data_type
    """
    exit_status: ExitStatus = Field(..., title="Exit Status")
    """
    State of the run when it ended
    """
    num_events: Optional[Dict[str, int]] = Field(None, title="Num Events")
    """
    Number of Events per named stream
    """
    reason: Optional[str] = Field(None, title="Reason")
    """
    Long-form description of why the run ended
    """
    run_start: str = Field(..., title="Run Start")
    """
    Reference back to the run_start document that this document is paired with.
    """
    time: float = Field(..., title="Time")
    """
    The time the run ended. Unix epoch
    """
    uid: str = Field(..., title="Uid")
    """
    Globally unique ID for this document
    """
