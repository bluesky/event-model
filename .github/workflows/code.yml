name: Code CI

on:
  push:
  pull_request:
env:
  # The target python version, which must match the Dockerfile version
  CONTAINER_PYTHON: "3.11"

jobs:
  lint:
    # pull requests are a duplicate of a branch push if within the same repo.
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install python packages
        uses: ./.github/actions/install_requirements
        with:
          requirements_file: requirements-dev-3.x.txt
          install_options: -e .[dev]

      - name: Lint
        run: tox -e pre-commit,mypy

  test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"] # can add windows-latest, macos-latest
        python: ["3.9", "3.10", "3.11"]
        install: ["-e .[dev]"]
        # Make one version be non-editable to test both paths of version code
        include:
          - os: "ubuntu-latest"
            python: "3.8"
            install: ".[dev]"

    runs-on: ${{ matrix.os }}
    env:
      # https://github.com/pytest-dev/pytest/issues/2042
      PY_IGNORE_IMPORTMISMATCH: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Need this to get version number from last tag
          fetch-depth: 0

      - name: Install python packages
        uses: ./.github/actions/install_requirements
        with:
          python_version: ${{ matrix.python }}
          requirements_file: requirements-test-${{ matrix.os }}-${{ matrix.python }}.txt
          install_options: ${{ matrix.install }}

      - name: List dependency tree
        run: pipdeptree

      - name: Run tests
        run: pytest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: ${{ matrix.python }}/${{ matrix.os }}
          files: cov.xml

  dist:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Need this to get version number from last tag
          fetch-depth: 0

      - name: Build sdist and wheel
        run: |
          export SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct) && \
          pipx run build

      - name: Upload sdist and wheel as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

      - name: Check for packaging errors
        run: pipx run twine check --strict dist/*

      - name: Install python packages
        uses: ./.github/actions/install_requirements
        with:
          python_version: ${{env.CONTAINER_PYTHON}}
          requirements_file: requirements.txt
          install_options: dist/*.whl

      - name: Test module --version works using the installed wheel
        # If more than one module in src/ replace with module name to test
        run: python -m $(ls src | head -1) --version

  release:
    # upload to PyPI and make a release on every tag
    needs: [lint, dist, test]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    env:
      HAS_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN != '' }}

    steps:
      - uses: actions/download-artifact@v3

      - name: Fixup blank lockfiles
        # Github release artifacts can't be blank
        run: for f in lockfiles/*; do [ -s $f ] || echo '# No requirements' >> $f; done

      - name: Github Release
        # We pin to the SHA, not the tag, for security reasons.
        # https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#using-third-party-actions
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v0.1.15
        with:
          prerelease: ${{ contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'rc') }}
          files: |
            dist/*
            lockfiles/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: ${{ env.HAS_PYPI_TOKEN }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
